//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

/// <summary>
/// 特殊规则
/// </summary>
public sealed partial class FlagCondition :  Bright.Config.BeanBase 
{
    public FlagCondition(JSONNode _json) 
    {
        { if(!_json["id"].IsString) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["has"].IsBoolean) { throw new SerializationException(); }  Has = _json["has"]; }
        { if(!_json["in_parent"].IsBoolean) { throw new SerializationException(); }  InParent = _json["in_parent"]; }
        { if(!_json["alive"].IsBoolean) { throw new SerializationException(); }  Alive = _json["alive"]; }
        { if(!_json["has_time"].IsNumber) { throw new SerializationException(); }  HasTime = _json["has_time"]; }
        PostInit();
    }

    public FlagCondition(string id, bool has, bool in_parent, bool alive, float has_time ) 
    {
        this.Id = id;
        this.Has = has;
        this.InParent = in_parent;
        this.Alive = alive;
        this.HasTime = has_time;
        PostInit();
    }

    public static FlagCondition DeserializeFlagCondition(JSONNode _json)
    {
        return new config.FlagCondition(_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 是否存在
    /// </summary>
    public bool Has { get; private set; }
    /// <summary>
    /// 是否必须在父根中
    /// </summary>
    public bool InParent { get; private set; }
    /// <summary>
    /// 是否存活
    /// </summary>
    public bool Alive { get; private set; }
    /// <summary>
    /// 存活长度
    /// </summary>
    public float HasTime { get; private set; }

    public const int __ID__ = 199178563;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Has:" + Has + ","
        + "InParent:" + InParent + ","
        + "Alive:" + Alive + ","
        + "HasTime:" + HasTime + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
